version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: appointment_postgres
    restart: unless-stopped
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: appointment_app
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - appointment_network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Backend Server
  server:
    build:
      context: ./server
      dockerfile: Dockerfile
    container_name: appointment_server
    restart: unless-stopped
    ports:
      - "4000:4000"
    environment:
      DATABASE_URL: "postgresql://postgres:postgres@postgres:5432/appointment_app"
      JWT_SECRET: "0fd37d53c01de7a8120a8af3c9c923eb"
      PORT: 4000
      CLIENT_URL: "http://localhost:3000"
      NODE_ENV: production
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - appointment_network
    volumes:
      - ./server:/app
      - /app/node_modules
    command: >
      sh -c "
        npx prisma generate &&
        npx prisma migrate deploy &&
        npm start
      "

  # Frontend Client
  client:
    build:
      context: ./client
      dockerfile: Dockerfile
      target: development
    container_name: appointment_client
    restart: unless-stopped
    ports:
      - "3000:3000"
    environment:
      - VITE_API_URL=http://localhost:4000
    depends_on:
      - server
    networks:
      - appointment_network
    volumes:
      - ./client:/app
      - /app/node_modules
    stdin_open: true
    tty: true

networks:
  appointment_network:
    driver: bridge

volumes:
  postgres_data: